104. Maximum Depth of Binary Tree
Easy

6763

124

Add to List

Share
Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.



Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: 3
Example 2:

Input: root = [1,null,2]
Output: 2


Constraints:

The number of nodes in the tree is in the range [0, 104].
-100 <= Node.val <= 100
Accepted
1,624,151
Submissions
2,263,144
Seen this question in a real interview before?

Yes

No

Problems

Pick On

===================================================================================================================================================================================

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* root) {
//         int ans=0;
//         queue<TreeNode*> q;
//         TreeNode*temp=root;
//         q.push(temp);

//         while(!q.empty()&& root)
//         {
//             int size=q.size();

//             while(size--){
//             temp=q.front();
//             q.pop();

//             if(temp->left)
//                 q.push(temp->left);
//             if(temp->right)
//                 q.push(temp->right);

//             }
//             ans++;
//         }
//         return ans;
        if(root==NULL) 
            return 0;
         int x=maxDepth(root->left);
          int y=maxDepth(root->right);
        return max(x,y)+1;

    }
};
