98. Validate Binary Search Tree
Medium

9477

875

Add to List

Share
Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:


Input: root = [2,1,3]
Output: true
Example 2:


Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1
Accepted
1,370,685
Submissions
4,497,790
Seen this question in a real interview before?

Yes

No

Problems

Pick One


====================================================================================================================================================================

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
//     void inorder(TreeNode* root,vector<int> &v)
//     {
//         if(!root)
//             return;
//         inorder(root->left,v);
//         v.push_back(root->val);
//         inorder(root->right,v);
//     }
//     bool isValidBST(TreeNode* root) {
//         vector<int> v;
//         inorder(root,v);
//         for(int i=1;i<v.size();i++)
//         {
//            if(v[i]<=v[i-1])
//                return false;
//         }
//         return true;
        
//     }
      void fun(TreeNode* root,TreeNode* &prev,int &f)
    {
        if(!root)
            return;
        fun(root->left,prev,f);
       if((prev!=NULL) && (root->val <= prev->val))
        {
           f=0;
           return;
        }
        prev=root;
        fun(root->right,prev,f);
           
    }
    bool isValidBST(TreeNode* root) {
           int f=1;
        TreeNode* prev =NULL;
        fun(root,prev,f);
            return f;
        
        
    }
};
