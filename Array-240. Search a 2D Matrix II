240. Search a 2D Matrix II
Medium

8714

145

Add to List

Share
Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
 

Example 1:


Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5
Output: true
Example 2:


Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20
Output: false
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= n, m <= 300
-109 <= matrix[i][j] <= 109
All the integers in each row are sorted in ascending order.
All the integers in each column are sorted in ascending order.
-109 <= target <= 109
Accepted
680,200
Submissions
1,362,273
Seen this question in a real interview before?

Yes

No

Problems

=======================================================================================================================================================================================
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        // int n=matrix.size();
        // int m=matrix[0].size();
        // for(int i=0;i<n;i++)
        // {
        //     if(matrix[i][0]<=target && matrix[i][m-1]>=target)
        //     {
        //         int s=0;
        //         int e=m-1;
        //         int mid=s+(e-s)/2;
        //         while(s<=e)
        //         {
        //              if(matrix[i][mid]==target)
        //                 return true;
        //             else if(target>matrix[i][mid])
        //                 s=mid+1;
        //             else
        //                e=mid-1;
        //            mid=s+(e-s)/2;
        //         }
        //     }
        // }
        // return false;
        
          int n=matrix.size();
        int m=matrix[0].size();
        
        // start from the [first row, last column] element
        int i=0;
        int j=m-1;
        while(i<n && j>=0){
            if(matrix[i][j]==target) // target found
                return true;
            else if(matrix[i][j]>target) //target is smaller, go leftwards
                --j; // decrease the column index
            else // target is larger, go downwards
                ++i; // increase the row index
        }
        return false; // target not found
    }
};
