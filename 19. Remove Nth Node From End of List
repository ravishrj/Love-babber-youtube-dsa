19. Remove Nth Node From End of List
Medium

11222

515

Add to List

Share
Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz
 

Follow up: Could you do this in one pass?

Accepted
1,515,498
Submissions
3,903,695
Seen this question in a real interview before?

Yes

No

Problems

Pick One

========================================================================================================================================================================

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* temp=head;
        ListNode* prev=NULL;
        int cnt=0;
            
        while(temp!=NULL)
        {
            cnt++;
            temp=temp->next;
        }
        temp=head;
         // if(cnt==1)
         //    return NULL;
        cnt=cnt-n+1;
        int i=1;
        while(temp!=NULL)
        {
            if(i==cnt)
                break;
            prev=temp;
            temp=temp->next;
            i++;
        }
        if(prev!=NULL)
        prev->next=temp->next;
        if(cnt==1)
        {
            head=temp->next;
        }
        delete temp;
        return head;
        
    }
};
