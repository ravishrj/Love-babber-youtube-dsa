3. Longest Substring Without Repeating Characters
Medium

24702

1084

Add to List

Share
Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.
Accepted
3,388,299
Submissions
10,186,818
Seen this question in a real interview before?

Yes

No

Problems

Pick



=============================================================================================================================================================

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
  unordered_map<char, int> freq;
                int n = s.length(), st = 0, end = 0, ans = 0;
        
        while(end < n){            
            freq[s[end]]++;            
            while(freq[s[end]] != 1){
                freq[s[st]]--;
                st++;
            }            
            ans = max(ans, end - st + 1);
            end++;                   
        }
        
        return ans;

//         unordered_set<char> set;
// 		int i = 0, j = 0, n = s.size(), ans = 0;
// 		while(j<n){
// 			if(set.find(s[j]) == set.end()){ //If the character does not in the set
// 				set.insert(s[j++]); //Insert the character in set and update the j counter
// 				ans = max(ans, j-i); //Check if the new distance is longer than the current answer
// 			}
// 			else{
// 				//If character does exist in the set, ie. it is a repeated character, 
// 				//we update the left side counter i, and continue with the checking for substring. 
// 				set.erase(s[i++]); 
// 			}
// 		}
// 		return ans;
        
    }
};
