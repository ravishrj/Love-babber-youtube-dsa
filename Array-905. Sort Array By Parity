905. Sort Array By Parity
Easy

3051

116

Add to List

Share
Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.

Return any array that satisfies this condition.

 

Example 1:

Input: nums = [3,1,2,4]
Output: [2,4,3,1]
Explanation: The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.
Example 2:

Input: nums = [0]
Output: [0]
 

Constraints:

1 <= nums.length <= 5000
0 <= nums[i] <= 5000
Accepted
464,049
Submissions
616,567





class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& nums) {
//         vector<int> even;
//         vector<int> odd;
//         for(int i=0;i<nums.size();i++)
//         {
//             if(nums[i]%2==0)
//                 even.push_back(nums[i]);
//             else
//                 odd.push_back(nums[i]);
//         }
//         nums.clear();
//         for(auto & it:even)
//             nums.push_back(it);
//         for(auto & it:odd)
//             nums.push_back(it);
//         even.clear();
//         odd.clear();
//         return nums;
        
//     }
       int n = nums.size();
        
        int lastOddIndex = -1;
        
        for(int i = 0; i < n ; i++){
            
            if(nums[i]%2==0 and lastOddIndex!=-1){
                swap(nums[lastOddIndex], nums[i]);
                lastOddIndex++;
            }
            
            if(nums[i]%2!=0 and lastOddIndex==-1){
                lastOddIndex = i;
            }
            
        }
        
        return nums;
        
    }
};
