 Find the Duplicate Number
Medium

12608

1422

Add to List

Share
Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3
 

Constraints:

1 <= n <= 105
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more times.
 

Follow up:

How can we prove that at least one duplicate number must exist in nums?
Can you solve the problem in linear runtime complexity?
Accepted
771,222
Submissions
1,316,569
Seen this question in a real interview before?

Yes

No

Problems


==============================================================================================================================

class Solution {
public:
    int findDuplicate(vector<int>& arr) {
//    int ans=0;
//      for(int i=0;i<arr.size();i++)
//     {
//         ans=ans^arr[i];  
        
//     }
//       for(int i=1;i<arr.size();i++)
//     {
//         ans=ans^i;  
        
//     }
//     return ans;
//     }
        // sort(arr.begin(),arr.end());
        // for(int i=1;i<arr.size();i++)
        // {
        //     if(arr[i]==arr[i-1])
        //         return arr[i];
        // }
        // return 0;
        
        //floyd cycle detection
        int tortoise = nums[0];
        int hare = nums[0];

        do {
            tortoise = nums[tortoise];
            hare = nums[nums[hare]];
        } while (tortoise != hare);

        // Find the "entrance" to the cycle.
        tortoise = nums[0];
        while (tortoise != hare) {
            tortoise = nums[tortoise];
            hare = nums[hare];
        }

        return hare;
        
        //unordered set;
           unordered_set<int> seen;
        for (auto &num : nums) {
            if (seen.count(num))
                return num;
            seen.insert(num);
        }
        return -1;
    }
};
