108. Convert Sorted Array to Binary Search Tree
Easy

6204

349

Add to List

Share
Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.

A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.

 

Example 1:


Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also accepted:

Example 2:


Input: nums = [1,3]
Output: [3,1]
Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in a strictly increasing order.
Accepted
725,295
Submissions
1,100,035
Seen this question in a real interview before?

Yes

No

Problems

Pick One

Prev

=========================================================================================================================================================================

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        if(nums.size() == 0) return nullptr;
        if(nums.size() == 1) return new TreeNode(nums[0]);
        int mid = nums.size()/2; // we find the middle element
        TreeNode* root = new TreeNode(nums[mid]); // we make the root node from the middle element
        
        vector<int>begin(nums.begin(), nums.begin()+mid); // we make a vector of all the elements before mid for our left 
        vector<int>ending(nums.begin()+mid+1, nums.end()); // we make a vector of all the elements after mid for our right
        
        root->left = sortedArrayToBST(begin);
        root->right = sortedArrayToBST(ending);
        
        return root;
    }
};
