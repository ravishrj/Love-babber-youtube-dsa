387. First Unique Character in a String
Easy

4836

192

Add to List

Share
Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

 

Example 1:

Input: s = "leetcode"
Output: 0
Example 2:

Input: s = "loveleetcode"
Output: 2
Example 3:

Input: s = "aabb"
Output: -1
 

Constraints:

1 <= s.length <= 105
s consists of only lowercase English letters.
Accepted
1,024,601
Submissions
1,797,512
Seen this question in a real interview before?

Yes

No

Problems

Pick One


===================================================================================================================================================


class Solution {
public:
    int firstUniqChar(string s) {
        int n=s.size();
       
        // for(int i=0;i<n;i++)
        // {
        //      int check=0;
        //     for(int j=0;j<n;j++)
        //     {
        //         if(s[i]==s[j]&& i!=j)
        //         {
        //             check=1;
        //             break;
        //         }
        //     }
        //     if(check==0)
        //         return i;
        // }
        // return -1;
//         map<char,int> mp;
//         for(int i=0;i<n;i++)
//         {
//             mp[s[i]]++;
//         }
//         for(int i=0;i<n;i++)
//         {
//             if(mp[s[i]]==1)
//                 return i;
                
//         }
//         return -1;
       vector<pair<int,int>> chars(26);
        for(int i = 0; i < s.size(); i++){
            if(chars[s[i] - 'a'].second == 0){
                chars[s[i] - 'a'].first = i;
            }
            chars[s[i] - 'a'].second++;
        }
        int ans = s.size();
        for(int i = 0; i < 26; i++){
            if(chars[i].second == 1)
                ans = min(ans, chars[i].first);
        }
        return ans == s.size() ? -1 : ans;
    }
};
