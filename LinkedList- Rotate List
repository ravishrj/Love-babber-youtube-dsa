61. Rotate List
Medium

4713

1261

Add to List

Share
Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
 

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109

===========================================================================================================================================================================


ListNode* rotateRight(ListNode* head, int k){
         if(head==NULL || head->next==NULL)
            return head;
        int cnt = 1;
        ListNode* temp=head;
		// counting nodes in list
        while(temp->next != NULL)
        {
            temp = temp -> next;
            cnt++;
        }
		
		// mod of k with cnt to find the minimum no of rotations.
        k = k % cnt;
        ListNode* prev=NULL;
        ListNode* curr=head;
        for(int i=1;i<=k;i++ )
        {
            while(curr->next!=NULL)
            {
                prev=curr;
                curr=curr->next;
            }
            curr->next=head;
            head=curr;
            prev->next=NULL;
            prev=NULL;
            
            
        }
        return head;
    }
};


=================================================================================================================================

int n = 0;
        ListNode *temp = head;
        
        while(temp){
            n++;
            if(!temp->next) break;
            temp = temp->next;
        }
        if(n<=1) return head;
        k = k%n;
        if(k==0) return head;
        
        temp->next = head; //make list circular
        
        temp = head;
        for(int i=0; i<n-k-1; ++i) temp = temp->next;
        head = temp->next;
        temp->next = nullptr;
        
        return head;
