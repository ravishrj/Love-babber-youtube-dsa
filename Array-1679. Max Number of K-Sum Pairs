1679. Max Number of K-Sum Pairs
Medium

1277

32

Add to List

Share
You are given an integer array nums and an integer k.

In one operation, you can pick two numbers from the array whose sum equals k and remove them from the array.

Return the maximum number of operations you can perform on the array.

 

Example 1:

Input: nums = [1,2,3,4], k = 5
Output: 2
Explanation: Starting with nums = [1,2,3,4]:
- Remove numbers 1 and 4, then nums = [2,3]
- Remove numbers 2 and 3, then nums = []
There are no more pairs that sum up to 5, hence a total of 2 operations.
Example 2:

Input: nums = [3,1,3,4,3], k = 6
Output: 1
Explanation: Starting with nums = [3,1,3,4,3]:
- Remove the first two 3's, then nums = [1,4,3]
There are no more pairs that sum up to 6, hence a total of 1 operation.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109
1 <= k <= 109
Accepted
78,303
Submissions
137,790

======================================================================================================================================================================

class Solution {
public:
    int maxOperations(vector<int>& nums, int k) {
        int count =0;
        unordered_map<int,int> mp;
        
        for(int i =0;i<nums.size();i++){
        
            int diff = k - nums[i];  
            if(mp[diff]>0){
                
                count++;               // increase count since we got the pair
                mp[diff]--;            // decrease freq of diff as we used it for our pair 
                
            }
            else{
                mp[nums[i]]++;         // no pair found so put it in hashmap
            }
            
            
        }
        
        return count;
//        my approach
//         sort(nums.begin(),nums.end());
//         map<int,int> mp;
//         int ans=0;
//         for(int i=0;i<nums.size()-1;i++)
//         {
//             if(mp[i]==1)
//                 continue;
//             mp.insert({i,0});
//             int x=abs(k-nums[i]);
//             for(int j=i+1;j<nums.size();j++)
//             {
//                 if(nums[j]==x&&mp[j]==0)
//                 {
//                    ans++; 
//                     mp[i]=1;
//                      mp[j]=1;
//                     break;
                    
//                 }
//             }
            
//         }
//         return ans;
        
        //2nd binary search approach 2 pointer
        
  //       sort(nums.begin(),nums.end());
//         int i =0;
//         int j =nums.size()-1;
//         int count =0;
//         while(i<j){
//             if(nums[i]+nums[j]>k){
//                 j--;
//                 continue;
//             }
//             if(nums[i]+nums[j]==k){
//                 count++;
//                 i++;
//                 j--;
//                 continue;
//             }
            
//             if(nums[i]+nums[j]<k){
//                 i++;
//                 continue;
//             }
            
//         }
        
//         return count;
    }
};
