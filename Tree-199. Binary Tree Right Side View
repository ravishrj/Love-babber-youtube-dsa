199. Binary Tree Right Side View
Medium

7327

404

Add to List

Share
Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

 

Example 1:


Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]
Example 2:

Input: root = [1,null,3]
Output: [1,3]
Example 3:

Input: root = []
Output: []
 

Constraints:


====================================================================================================================================================

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //recursion dfs
      void dfs(TreeNode* root, int lv, vector<int> &res){
        if(!root)   return;
        if(lv>=res.size()) res.push_back(root->val);
        dfs(root->right,lv+1,res);
        dfs(root->left,lv+1,res);
    }

    vector<int> rightSideView(TreeNode* root) {
        vector<int> res;
        dfs(root, 0, res);
        return res;
    }
    //level-order traversal 
    // vector<int> rightSideView(TreeNode* root) {
    //     vector<int> ans;
    //     queue<TreeNode*> q;
    //     q.push(root);
    //     while(!q.empty() && root)
    //     {
    //         int sz=q.size();
    //         vector<int> v;
    //         while(sz--)
    //         {
    //             TreeNode* temp=q.front();
    //             q.pop();
    //             v.push_back(temp->val);
    //             if(temp->left)
    //                 q.push(temp->left);
    //             if(temp->right)
    //                 q.push(temp->right);                
    //         }
    //         ans.push_back(v[v.size()-1]);
    //     }
    //     return ans;
   //}
};
