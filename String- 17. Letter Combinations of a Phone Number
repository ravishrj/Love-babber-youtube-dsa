17. Letter Combinations of a Phone Number
Medium

10043

680

Add to List

Share
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 

Constraints:

0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].
Accepted
1,183,448
Submissions
2,196,727
Seen this question in a real interview before?

Yes

No

Problems


========================================================================================================================================================================

class Solution {
public:
    void solve(string d ,vector<string>&v,vector<string>&temp,string &s)
        {
            if(s.size() == d.size())
            {
                v.push_back(s);
                return;
            }
            string x = temp[s.size()];
            for(auto i : x)
            {
                s.push_back(i);
                solve(d,v,temp,s);
                s.pop_back();
            }
        }
    vector<string> letterCombinations(string digits) {
//         vector<string>v;
//         vector<string>phone = {"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
//         if(digits.size() == 0)
//             return v;
//         v.push_back("");
        
//         for(auto digit : digits)
//         {
//             vector<string>temp;
//             for(auto click : phone[digit-'0'])
//             {
//                 for(auto x : v)
//                 {
//                     temp.push_back(x+click);
//                 }
                
//             }
//             v = temp;
//         }
//         return v;  
        
        
    //    METHOD 2
        vector<string>v;
        if(digits.size() == 0)
            return v;
        unordered_map<char,string>m;
        m['2'] = "abc";
        m['3'] = "def";
        m['4'] = "ghi";
        m['5'] = "jkl";
        m['6'] = "mno";
        m['7'] = "pqrs";
        m['8'] = "tuv";
        m['9'] = "wxyz";
        vector<string>temp;
        for(int i = 0;i<digits.size();i++)
            temp.push_back(m[digits[i]]);
        
        string s = "";
        solve(digits,v,temp,s);
        return v;
        
    }
};
