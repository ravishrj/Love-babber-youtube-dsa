

Add Two Numbers As Linked Lists ll
Difficulty: MEDIUM
Contributed By
Deep Mavani
|
Level 1
Avg. time to solve
10 min
Success Rate
80%
Problem Statement
You have been given two singly Linked Lists, where each of them represents a positive number without any leading zeros.
Your task is to add these two numbers and print the summation in the form of a linked list.
Example:
If the first linked list is 1 -> 2 -> 3 -> 4 -> 5 -> NULL and the second linked list is 4 -> 5 -> NULL.

The two numbers represented by these two lists are 12345 and 45, respectively. So, adding these two numbers gives 12390. 

So, the linked list representation of this number is 1 -> 2 -> 3 -> 9 -> 0 -> NULL.
Input Format:
The first line of input contains an integer 'T' representing the number of test cases. 

The first line of each test case contains the elements of the first linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.

The second line of each test case contains the elements of the second linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.
Output Format:
For each test case, return the head of linked list after summation. The elements of the linked list must be terminated by -1.
Note:
You don't need to print anything, it has already been taken care of. Just implement the given function.
Follow-Up:
Try to solve this problem in linear time complexity and constant space complexity.
1 <= T <= 100
1 <= L <= 5000
0 <= data <= 9 and data != -1

Where 'L' is the number of nodes in either of the two Linked List and 'data' is the element value in a node of the linked list.

Time limit: 1 sec
Sample Input 1 :
2
1 1 -1
9 9 9 -1
2 4 -1
5 3 -1
Sample Output 1:
1 0 1 0 -1
7 7 -1
Explanation For Sample Output 1:
In test case 1, we are adding 11 and 999 to get 1010.

In test case 2, we are adding 24 and 53 to get 77.
Sample Input 2:
2
3 8 1 2 9 -1
9 8 2 9 -1
1 9 0 -1
8 1 0 -1
Sample Output 2:
4 7 9 5 8 -1
1 0 0 0 -1
Explanation For Sample Output 2:
In test case 1, we are adding 38129 and 9829 to get 47958.

In test case 2, we are adding 190 and 810 to get 1000.


=======================================================================================================================================================================


/************************************************************

    Following is the linked list node structure:
    
    template <typename T>
    class Node {
        public:
        T data;
        Node* next;

        Node(T data) {
            next = NULL;
            this->data = data;
        }
    };

************************************************************/
Node<int>* reverse(Node<int>* head)
{
    Node<int>* prev=NULL;
    Node<int>* next=NULL;
     Node<int>* curr=head;
    while(head)
    {
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
    }
    return prev;
    
}
Node<int>* addTwoLists(Node<int>* first, Node<int>* second) {
     Node<int>* ans=NULL;
     first=reverse(first);
     second=reverse(second);
     int c=0;
      while(first || second || c)
      {
        int x=0,y=0;
        if(first){
          x=first->data;
          first=first->next;
            }
        if(second){
            y=second->data;
            second=second->next;
        }
        int s=x+y+c;
        c=s/10;
        s=s%10;
        Node<int>*newNode=new Node<int>(s);
        newNode->next=ans;
        ans=newNode;
        
        second=second->next;
    }
   return ans;
    
}




leetcode question


=========================================================================================================================================================

2. Add Two Numbers
Medium

17504

3633

Add to List

Share
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.
Accepted
2,646,822
Submissions
6,893,845
Seen this question in a real interview before?

Yes

No

Problems

 ===========================================================================================================================================================
 
 /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
//        string s1="";
//         string s2="";
//         while(l1!=NULL)
//         {
//             string x=to_string(l1->val);
//             s1=s1+x;
//             l1=l1->next;
                
//         }
//         while(l2!=NULL)
//         {
//             string x=to_string(l2->val);
//             s2=s2+x;
//             l2=l2->next;  
//         }
//         reverse(s1.begin(),s1.end());
//         reverse(s2.begin(),s2.end());
//         long long int x=stoi(s1);
//         long long int y=stoi(s2);
//         string str=to_string(x+y);
//         reverse(str.begin(),str.end());
        
//         ListNode* head=new ListNode(str[0]-'0');
//         ListNode* ans=head;
//         for(int i=1;i<str.length();i++)
//         {
//             ListNode* temp=new ListNode(str[i]-'0');
//             head->next=temp;
//             head=head->next;
//         }
//         return ans;
        ListNode *ptr = new ListNode();     //new list;
        ListNode *temp = ptr;
        
        int c = 0;
		//traversing both list till one of the list not reaches NULL
        while (l1 != NULL ||  l2 != NULL || c)
        {
            int sum = 0;
			// if l1  is not null
			// add l1-> value to sum
            if(l1 != NULL)
            {
                sum += l1->val;
                l1 = l1 -> next;
            }
            
			// if l2  is not null
			// add l2-> value to sum
            if(l2 != NULL)
            {
                sum += l2->val;
                l2 = l2 -> next;
            }
            
			// add carry to sum
            sum += c;
			// carry is updated by sum/10 because for 18 , 
			// 18 / 10 is 1 which is the carry
            c = sum/10;
			// add sum% 10 to new node as it containg the sum
            ListNode *node = new ListNode(sum%10);
            temp -> next = node;
            temp = temp -> next;
        }
        return ptr -> next;

    }
};
