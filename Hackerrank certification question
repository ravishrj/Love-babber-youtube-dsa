An anagram of a string is another string with the same characters in the same frequency, in any order. For example ‘abc’, ‘acb’,‘bca’,‘cab’,‘cba’,‘bac’ all are anagrams of ‘abc’.Given two arrays of strings, for every string in one list, determine how many anagrams of it are in the other list.
Write a function that receives dictionary and query, two string arrays. It should return an array of integers where each element 'i’contains the number of anagrams of query[i] that exist in dictionary.

Example

dictionary = [‘hack’, ‘a’, ‘rank’,‘khac’,‘ackh’, ‘kran’,‘rankhacker’, ‘a’, ‘ab’, ‘bo’, ‘stairs’, ‘raits’]

query = [“a”, “nark”, “bs”, “hack”, “stair”)

query[0] =“a” has 2 anagrams in dictionary: ‘a’ and ‘a’.

query[1]= “nark” has 2 anagrams in dictionary: ‘rank’ and ‘kran’.

query[2] = “bs” has 0 anagrams in dictionary

query[3] = “hack” has 3 anagrams in dictionary. ‘hack’, ‘khac’ and ‘ackh’.

query[4] = “stair” has 1 anagram in dictionary: ‘raits’

While the characters are the same in stairs, the frequency of 's’differs, so it is not an anagram.

The final answer is [2, 2, 0, 3, 1].

stringAnagram has the following parameters:

string dictionary[n]: an array of strings to search

in
string query[q]: an array of strings to search for

Returns

int[q]: an array of integers where the value is the answer to query[i].

Constraints

• 1<= length(dictionary), length(query) <= 10^5

• Every string consists of lowercase English letters.

=============================================================================================================================================================

#include <bits/stdc++.h>
using namespace std;

int main() {
	
   vector<string> dictionary;
   cout<<"enter  dictionary string"<<endl;
   int n;
   cin>>n;
   for(int i=0;i<n;i++)
   {
       string st;
       cin>>st;
       dictionary.push_back(st);
   }
   vector<string> query;
   cout<<"enter query string"<<endl;
   int m;
   cin>>m;
   for(int i=0;i<m;i++)
   {
       string st;
       cin>>st;
       query.push_back(st);
   }
	map<string,int> map;
	vector<int> ans;
	for(int i=0;i<dictionary.size();i++)
	{
	    sort(dictionary[i].begin(),dictionary[i].end());
	   
	        map[dictionary[i]]++;
	}
	for(int i=0;i<query.size();i++)
	{
	       sort(query[i].begin(),query[i].end());
	   
	        ans.push_back(map[query[i]]);
	    
	    
	}
	for(int i=0;i<ans.size();i++)
	{
	    cout<<ans[i]<<endl;
	}
	
	
	return 0;
}
