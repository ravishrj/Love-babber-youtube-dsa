101. Symmetric Tree
Easy

9181

225

Add to List

Share
Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

 

Example 1:


Input: root = [1,2,2,3,4,4,3]
Output: true
Example 2:


Input: root = [1,2,2,null,3,null,3]
Output: false
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
-100 <= Node.val <= 100
 

Follow up: Could you solve it both recursively and iteratively?
Accepted
1,212,343
Submissions
2,353,071
Seen this question in a real interview before?

Yes

No

Problems

Pick One


==========================================================================================================================================================

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool ismirror(TreeNode* root1,TreeNode* root2)
    {
        if(!root1&&!root2)
            return true;
        if(root1&&root2&&(root1->val==root2->val))
        return ismirror(root1->left,root2->right)&&ismirror(root1->right,root2->left);
        return false;
    }
    
    bool isSymmetric(TreeNode* root)
    {
     return ismirror(root,root);
        
    }
     // void leftpart(TreeNode* root,vector<int> &v)
     // {
    //     if(!root)
    //     {
    //         v.push_back(-1);
    //         return;
    //     }
    //     leftpart(root->left,v);
    //     v.push_back(root->val);
    //     leftpart(root->right,v);
    // }
    //  void rightpart(TreeNode* root,vector<int> &v1)
    // {
    //     if(!root)
    //     {
    //         v1.push_back(-1);
    //         return;
    //     }
    //       rightpart(root->right,v1);
    //       v1.push_back(root->val);
    //      rightpart(root->left,v1);
    // }
//     bool isSymmetric(TreeNode* root) {
//      if(!root)
//             return 1;
        
//         queue<TreeNode*> q;
//         q.push(root->left);
//         q.push(root->right);
        
//         while(!q.empty())
//         {
//             TreeNode *l,*r;
            
//             l=q.front();
//             q.pop();
            
//             r=q.front();
//             q.pop();
            
//             if(!l && !r)
//                 continue;
            
//             if(!l || !r || l->val!=r->val)
//                 return 0;
            
//             q.push(l->left);
//             q.push(r->right);
            
//             q.push(l->right);
//             q.push(r->left);
//         }
//         return 1;
//     }
};
