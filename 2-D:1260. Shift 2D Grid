1260. Shift 2D Grid
Easy

844

219

Add to List

Share
Given a 2D grid of size m x n and an integer k. You need to shift the grid k times.

In one shift operation:

Element at grid[i][j] moves to grid[i][j + 1].
Element at grid[i][n - 1] moves to grid[i + 1][0].
Element at grid[m - 1][n - 1] moves to grid[0][0].
Return the 2D grid after applying shift operation k times.

 

Example 1:


Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1
Output: [[9,1,2],[3,4,5],[6,7,8]]
Example 2:


Input: grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4
Output: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]
Example 3:

Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9
Output: [[1,2,3],[4,5,6],[7,8,9]]
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m <= 50
1 <= n <= 50
-1000 <= grid[i][j] <= 1000
0 <= k <= 100
Accepted
51,991
Submissions
78,804

=================================================================================================================================================================================

class Solution {
public:
    vector<vector<int>> shiftGrid(vector<vector<int>>& grid, int k) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int> > ans(m,vector<int>(n));
        
        for(int i=0;i<m;i++)
        {
           for(int j=0;j<n;j++)
           {int newJ=(j+k)%n; // (j + numbers of columns added)%m
                
                int newI=(i+(j+k)/n)%m; // (i + numbers of rows added)%n 
                
                ans[newI][newJ]=grid[i][j];
           }
        }
        
        return ans;
        
        
        
        
        
        
        
        class Solution {
    int m, n;
    void reverse(vector<vector<int>>& grid, int l, int r) {
        while(l<r) {
            int lr = l/n, lc = l%n;
            int rr = r/n, rc = r%n;
            if(rr == m) rr = 0;
            swap(grid[lr][lc], grid[rr][rc]);
            l++;
            r--;
        }
    }
public:
    vector<vector<int>> shiftGrid(vector<vector<int>>& grid, int k) {
        m = grid.size(), n = grid[0].size();
        k = k%(m*n);
        if(k == 0) return grid;
        reverse(grid, 0, m*n-1);
        reverse(grid, 0, k-1);
        reverse(grid, k, m*n-1);
        return grid;
    }
};
Caution!
This code modifies the input matrix itself.
I regard this as a hacky way of achieving O(1) extra space, since one is bound to require some space for storing the output of the program. Plus this approach can lead to loss of information if implemented incorrectly. So take care while using it, or just make a copy of the input matrix and apply this algorithm on it instead.

Complexity
Time Complexity: O(m * n)
Space Complexity: O(1) (see above Caution)

Upvote if you liked this post and would like to see more of these in the future. Leave any doubts or suggestions in the comments.
Do you agree with the notion of modifying the input itself in order to get O(1) space?
    }
};
